using MathInput.Methods;
using MathInput.Resources;
using System.Collections.Generic;

namespace MathInput.Models
{
    public class Symbols
    {
        public static Dictionary<string, string> Operators = new Dictionary<string, string>();
        public static void OperatorInit()
        {
            // Common Arithmetic & Algebra Symbols
            Operators.AdvancedAdd("labelCommonArith", Language.labelCommonArith);
            Operators.AdvancedAdd("LESS_THAN", "<");
            Operators.AdvancedAdd("GREATER_THAN", ">");
            Operators.AdvancedAdd("LESS_THAN_OR_EQUAL_TO", "≤");
            Operators.AdvancedAdd("GREATER_THAN_OR_EQUAL_TO", "≥");
            Operators.AdvancedAdd("PLUS_OR_MINUS", "±");
            Operators.AdvancedAdd("NOT_EQUALS", "≠");
            Operators.AdvancedAdd("DIVISION_SIGN", "÷");
            Operators.AdvancedAdd("TIMES_X", "×");
            Operators.AdvancedAdd("PLUS", "+");
            Operators.AdvancedAdd("MINUS", "−");
            Operators.AdvancedAdd("DIVISION_SLASH", "∕");
            Operators.AdvancedAdd("FRACTION_SLASH", "⁄");
            Operators.AdvancedAdd("SQUARE_ROOT_RADICAL", "√");
            Operators.AdvancedAdd("CUBE_ROOT", "∛");
            Operators.AdvancedAdd("FOURTH_ROOT", "∜");
            Operators.AdvancedAdd("INFINITY", "∞");
            Operators.AdvancedAdd("ALEF_INFINITY_SYMBOL", "ℵ");
            Operators.AdvancedAdd("FUNCTION_ITALIC_F", "ƒ");
            Operators.AdvancedAdd("PRIME", "′");
            Operators.AdvancedAdd("DOUBLE_PRIME", "″");
            Operators.AdvancedAdd("TRIPLE_PRIME", "‴");
            Operators.AdvancedAdd("THEREFORE", "∴");
            Operators.AdvancedAdd("DOT_OPERATOR", "⋅");
            Operators.AdvancedAdd("LEFT_ANGLE_BRACKET", "⟨");
            Operators.AdvancedAdd("RIGHT_ANGLE_BRACKET", "⟩");
            Operators.AdvancedAdd("LEFT_CEILING_BRACKET", "⌈");
            Operators.AdvancedAdd("RIGHT_CEILING_BRACKET", "⌉");
            Operators.AdvancedAdd("LEFT_FLOOR_BRACKET", "⌊");
            Operators.AdvancedAdd("RIGHT_FLOOR_BRACKET", "⌋");
            Operators.AdvancedAdd("CIRCLED_PLUS", "⊕");
            Operators.AdvancedAdd("CIRCLED_TIMES", "⊗");

            //Superscript and subscript Symbols
            //Superscripts
            Operators.AdvancedAdd("labelSuperscripts", Language.labelSuperscripts);
            Operators.AdvancedAdd("SUPERSCRIPT_ZERO", "⁰");
            Operators.AdvancedAdd("SUPERSCRIPT_ONE", "¹");
            Operators.AdvancedAdd("SUPERSCRIPT_TWO", "²");
            Operators.AdvancedAdd("SUPERSCRIPT_THREE", "³");
            Operators.AdvancedAdd("SUPERSCRIPT_FOUR", "⁴");
            Operators.AdvancedAdd("SUPERSCRIPT_FIVE", "⁵");
            Operators.AdvancedAdd("SUPERSCRIPT_SIX", "⁶");
            Operators.AdvancedAdd("SUPERSCRIPT_SEVEN", "⁷");
            Operators.AdvancedAdd("SUPERSCRIPT_EIGHT", "⁸");
            Operators.AdvancedAdd("SUPERSCRIPT_NINE", "⁹");
            Operators.AdvancedAdd("SUPERSCRIPT_PLUS_SIGN", "⁺");
            Operators.AdvancedAdd("SUPERSCRIPT_MINUS", "⁻");
            Operators.AdvancedAdd("SUPERSCRIPT_EQUALS_SIGN", "⁼");
            Operators.AdvancedAdd("SUPERSCRIPT_LEFT_PARENTHESIS", "⁽");
            Operators.AdvancedAdd("SUPERSCRIPT_RIGHT_PARENTHESIS", "⁾");
            Operators.AdvancedAdd("SUPERSCRIPT_LATIN_SMALL_LETTER_I", "ⁱ");
            Operators.AdvancedAdd("SUPERSCRIPT_LATIN_SMALL_LETTER_N", "ⁿ");
            //Subscripts
            Operators.AdvancedAdd("labelSubscripts", Language.labelSubscripts);
            Operators.AdvancedAdd("SUBSCRIPT_ZERO", "₀");
            Operators.AdvancedAdd("SUBSCRIPT_ONE", "₁");
            Operators.AdvancedAdd("SUBSCRIPT_TWO", "₂");
            Operators.AdvancedAdd("SUBSCRIPT_THREE", "₃");
            Operators.AdvancedAdd("SUBSCRIPT_FOUR", "₄");
            Operators.AdvancedAdd("SUBSCRIPT_FIVE", "₅");
            Operators.AdvancedAdd("SUBSCRIPT_SIX", "₆");
            Operators.AdvancedAdd("SUBSCRIPT_SEVEN", "₇");
            Operators.AdvancedAdd("SUBSCRIPT_EIGHT", "₈");
            Operators.AdvancedAdd("SUBSCRIPT_NINE", "₉");
            Operators.AdvancedAdd("SUBSCRIPT_PLUS_SIGN", "₊");
            Operators.AdvancedAdd("SUBSCRIPT_MINUS", "₋");
            Operators.AdvancedAdd("SUBSCRIPT_EQUALS_SIGN", "₌");
            Operators.AdvancedAdd("SUBSCRIPT_LEFT_PARENTHESIS", "₍");
            Operators.AdvancedAdd("SUBSCRIPT_RIGHT_PARENTHESIS", "₎");
            Operators.AdvancedAdd("LATIN_SUBSCRIPT_SMALL_LETTER_A", "ₐ");
            Operators.AdvancedAdd("LATIN_SUBSCRIPT_SMALL_LETTER_E", "ₑ");
            Operators.AdvancedAdd("LATIN_SUBSCRIPT_SMALL_LETTER_O", "ₒ");
            Operators.AdvancedAdd("LATIN_SUBSCRIPT_SMALL_LETTER_I", "ᵢ");
            Operators.AdvancedAdd("LATIN_SUBSCRIPT_SMALL_LETTER_R", "ᵣ");
            Operators.AdvancedAdd("LATIN_SUBSCRIPT_SMALL_LETTER_U", "ᵤ");
            Operators.AdvancedAdd("LATIN_SUBSCRIPT_SMALL_LETTER_V", "ᵥ");
            Operators.AdvancedAdd("LATIN_SUBSCRIPT_SMALL_LETTER_X", "ₓ");
            Operators.AdvancedAdd("GREEK_SUBSCRIPT_SMALL_LETTER_BETA", "ᵦ");
            Operators.AdvancedAdd("GREEK_SUBSCRIPT_SMALL_LETTER_GAMMA", "ᵧ");
            Operators.AdvancedAdd("GREEK_SUBSCRIPT_SMALL_LETTER_RHO", "ᵨ");
            Operators.AdvancedAdd("GREEK_SUBSCRIPT_SMALL_LETTER_PHI", "ᵩ");
            Operators.AdvancedAdd("GREEK_SUBSCRIPT_SMALL_LETTER_CHI", "ᵪ");

            //Fraction Symbols
            Operators.AdvancedAdd("labelFraction", Language.labelFraction);
            Operators.AdvancedAdd("VULGAR_FRACTION_1by4", "¼");
            Operators.AdvancedAdd("VULGAR_FRACTION_1by2", "½");
            Operators.AdvancedAdd("VULGAR_FRACTION_3by4", "¾");
            Operators.AdvancedAdd("VULGAR_FRACTION_1by3", "⅓");
            Operators.AdvancedAdd("VULGAR_FRACTION_2by3", "⅔");
            Operators.AdvancedAdd("VULGAR_FRACTION_1by5", "⅕");
            Operators.AdvancedAdd("VULGAR_FRACTION_2by5", "⅖");
            Operators.AdvancedAdd("VULGAR_FRACTION_3by5", "⅗");
            Operators.AdvancedAdd("VULGAR_FRACTION_4by5", "⅘");
            Operators.AdvancedAdd("VULGAR_FRACTION_1by6", "⅙");
            Operators.AdvancedAdd("VULGAR_FRACTION_5by6", "⅚");
            Operators.AdvancedAdd("VULGAR_FRACTION_1by8", "⅛");
            Operators.AdvancedAdd("VULGAR_FRACTION_3by8", "⅜");
            Operators.AdvancedAdd("VULGAR_FRACTION_5by8", "⅝");
            Operators.AdvancedAdd("VULGAR_FRACTION_7by8", "⅞");

            //Common Statistics Symbols
            Operators.AdvancedAdd("labelCommonStatistics", Language.labelCommonStatistics);
            Operators.AdvancedAdd("LOWER_CASE_MU", "μ");
            Operators.AdvancedAdd("LOWER_CASE_SIGMA", "σ");
            Operators.AdvancedAdd("LOWER_CASE_CHI", "χ");
            Operators.AdvancedAdd("CAPITAL_SIGMA_N_ARY_SUMMATION", "∑");
            Operators.AdvancedAdd("CAPITAL_PI_N_ARY_PRODUCT", "∏");
            Operators.AdvancedAdd("N_ARY_COPRODUCT", "∐");
            Operators.AdvancedAdd("X_Bar", "x̄");
            Operators.AdvancedAdd("P_Hat", "p̂");
            Operators.AdvancedAdd("D_Bar", "D̄");

            //Measurement Symbols 
            Operators.AdvancedAdd("labelMeasurement", Language.labelMeasurement);
            Operators.AdvancedAdd("DEGREE_SYMBOL", "°");
            Operators.AdvancedAdd("MICRO_MU_SYMBOL", "µ");
            Operators.AdvancedAdd("SINGLE_PRIME", "′");
            Operators.AdvancedAdd("DOUBLE_PRIME", "″");
            Operators.AdvancedAdd("PER_MILLE", "‰");

            //Calculus Statistics Symbols 
            Operators.AdvancedAdd("labelCalculusStatistics", Language.labelCalculusStatistics);
            Operators.AdvancedAdd("INTEGRAL", "∫");
            Operators.AdvancedAdd("PARTIAL_DIFFERENTIAL", "∂");
            Operators.AdvancedAdd("INCREMENT", "Δ");
            Operators.AdvancedAdd("NABLA", "∇");
            //Additional Integral Symbols            
            Operators.AdvancedAdd("DOUBLE_INTEGRAL", "∬");
            Operators.AdvancedAdd("TRIPLE_INTEGRAL", "∭");
            Operators.AdvancedAdd("QUADRUPLE_INTEGRAL", "⨌");
            Operators.AdvancedAdd("CONTOUR_INTEGRAL", "∮");
            Operators.AdvancedAdd("SURFACE_INTEGRAL", "∯");
            Operators.AdvancedAdd("VOLUME_INTEGRAL", "∰");
            Operators.AdvancedAdd("CLOCKWISE_INTEGRAL", "∱");
            Operators.AdvancedAdd("ANTICLOCKWISE_INTEGRAL", "⨑");
            Operators.AdvancedAdd("CLOCKWISE_CONTOUR_INTEGRAL", "∲");
            Operators.AdvancedAdd("ANTICLOCKWISE_CONTOUR_INTEGRAL", "∳");

            //Letter Symbols
            Operators.AdvancedAdd("labelLetter", Language.labelLetter);
            Operators.AdvancedAdd("INFINITY", "∞");
            Operators.AdvancedAdd("ALEF_INFINITY", "ℵ");
            Operators.AdvancedAdd("WEIERSTRASS_POWER_SET", "℘");
            Operators.AdvancedAdd("IMAGINARY_Part", "ℑ");
            Operators.AdvancedAdd("REAL_NUMBER", "ℜ");
            Operators.AdvancedAdd("DOUBLE_STRUCK_REAL_NUMBER", "ℝ");
            Operators.AdvancedAdd("COMPLEX_NUMBERS", "ℂ");
            Operators.AdvancedAdd("NATURAL_NUMBERS", "ℕ");
            Operators.AdvancedAdd("PRIME_NUMBERS", "ℙ");
            Operators.AdvancedAdd("RATIONAL_NUMBERS", "ℚ");
            Operators.AdvancedAdd("INTEGERS", "ℤ");

            //Logic & Set Theory
            Operators.AdvancedAdd("labelLogicSet", Language.labelLogicSet);
            Operators.AdvancedAdd("FOR_ALL", "∀");
            Operators.AdvancedAdd("COMPLEMENT", "∁");
            Operators.AdvancedAdd("THERE_EXISTS", "∃");
            Operators.AdvancedAdd("THERE_DOES_NOT_EXIST", "∄");
            Operators.AdvancedAdd("EMPTY_SET", "∅");
            Operators.AdvancedAdd("NOT_SYMBOL", "¬");
            Operators.AdvancedAdd("TILDE", "˜");
            Operators.AdvancedAdd("LOGICAL_AND", "∧");
            Operators.AdvancedAdd("LOGICAL_OR", "∨");
            Operators.AdvancedAdd("XOR", "⊻");
            Operators.AdvancedAdd("NAND", "⊼");
            Operators.AdvancedAdd("NOR", "⊽");
            Operators.AdvancedAdd("INTERSECTION", "∩");
            Operators.AdvancedAdd("UNION", "∪");
            Operators.AdvancedAdd("ELEMENT_OF", "∈");
            Operators.AdvancedAdd("NOT_AN_ELEMENT_OF", "∉");
            Operators.AdvancedAdd("SMALL_ELEMENT_OF", "∊");
            Operators.AdvancedAdd("CONTAINS_AS_MEMBER", "∋");
            Operators.AdvancedAdd("DOES_NOT_CONTAIN_AS_MEMBER", "∌");
            Operators.AdvancedAdd("SMALL_CONTAINS_AS_MEMBER", "∍");
            Operators.AdvancedAdd("SET_MINUS", "∖");
            Operators.AdvancedAdd("SUBSET_OF", "⊂");
            Operators.AdvancedAdd("SUPERSET_OF", "⊃");
            Operators.AdvancedAdd("NOT_A_SUBSET_OF", "⊄");
            Operators.AdvancedAdd("NOT_A_SUPERSET_OF", "⊅");
            Operators.AdvancedAdd("SUBSET_OF_OR_EQUAL_TO", "⊆");
            Operators.AdvancedAdd("SUPERSET_OF_OR_EQUAL_TO", "⊇");
            Operators.AdvancedAdd("NEITHER_A_SUBSET_OF_NOR_EQUAL_TO", "⊈");
            Operators.AdvancedAdd("NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO", "⊉");
            Operators.AdvancedAdd("SUBSET_OF_WITH_NOT_EQUAL_TO", "⊊");
            Operators.AdvancedAdd("SUPERSET_OF_WITH_NOT_EQUAL_TO", "⊋");
            Operators.AdvancedAdd("DIAMOND_OPERATOR", "⋄");
            Operators.AdvancedAdd("ASYMPTOTICALLY_EQUAL_TO", "≃");
            Operators.AdvancedAdd("NOT_ASYMPTOTICALLY_EQUAL_TO", "≄");
            Operators.AdvancedAdd("MULTISET", "⊌");
            Operators.AdvancedAdd("MULTISET_MULTIPLICATION", "⊍");
            Operators.AdvancedAdd("MULTISET_UNION", "⊎");
            Operators.AdvancedAdd("DOUBLE_SUBSET", "⋐");
            Operators.AdvancedAdd("DOUBLE_SUPERSET", "⋑");
            Operators.AdvancedAdd("DOUBLE_INTERSECTION", "⋒");
            Operators.AdvancedAdd("DOUBLE_UNION", "⋓");
            Operators.AdvancedAdd("N_ARY_LOGICAL_AND", "⋀");
            Operators.AdvancedAdd("N_ARY_LOGICAL_OR", "⋁");
            Operators.AdvancedAdd("N_ARY_INTERSECTION", "⋂");
            Operators.AdvancedAdd("N_ARY_UNION", "⋃");
            Operators.AdvancedAdd("CURLY_LOGICAL_OR", "⋎");
            Operators.AdvancedAdd("CURLY_LOGICAL_AND", "⋏");
            Operators.AdvancedAdd("CIRCLED_MINUS", "⊖");
            Operators.AdvancedAdd("CIRCLED_DIVISION_SLASH", "⊘");
            //Other Element Of Symbols
            Operators.AdvancedAdd("ELEMENT_OF_WITH_LONG_HORIZONTAL_STROKE", "⋲");
            Operators.AdvancedAdd("ELEMENT_OF_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE", "⋳");
            Operators.AdvancedAdd("SMALL_ELEMENT_OF_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE", "⋴");
            Operators.AdvancedAdd("ELEMENT_OF_WITH_DOT_ABOVE", "⋵");
            Operators.AdvancedAdd("ELEMENT_OF_WITH_OVERBAR", "⋶");
            Operators.AdvancedAdd("ELEMENT_OF_WITH_UNDERBAR", "⋸");
            Operators.AdvancedAdd("ELEMENT_OF_WITH_TWO_HORIZONTAL_STROKES", "⋹");
            Operators.AdvancedAdd("CONTAINS_WITH_LONG_HORIZONTAL_STROKE", "⋺");
            Operators.AdvancedAdd("CONTAINS_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE", "⋻");
            Operators.AdvancedAdd("SMALL_CONTAINS_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE", "⋼");
            Operators.AdvancedAdd("CONTAINS_WITH_OVERBAR", "⋽");
            Operators.AdvancedAdd("SMALL_CONTAINS_WITH_OVERBAR", "⋾");
            Operators.AdvancedAdd("NOTATION_BAG_MEMBERSHIP", "⋿");

            //Geometric Symbols
            Operators.AdvancedAdd("labelGeometric", Language.labelGeometric);
            Operators.AdvancedAdd("RIGHT_ANGLE", "∟");
            Operators.AdvancedAdd("ANGLE", "∠");
            Operators.AdvancedAdd("MEASURED_ANGLE", "∡");
            Operators.AdvancedAdd("SPHERICAL_ANGLE", "∢");
            Operators.AdvancedAdd("DIVIDES", "∣");
            Operators.AdvancedAdd("DOES_NOT_DIVIDE", "∤");
            Operators.AdvancedAdd("PARALLEL_TO", "∥");
            Operators.AdvancedAdd("NOT_PARALLEL_TO", "∦");
            Operators.AdvancedAdd("RIGHT_ANGLE_WITH_ARC", "⊾");
            Operators.AdvancedAdd("RIGHT_TRIANGLE", "⊿");
            Operators.AdvancedAdd("UP_TACK", "⁺");
            Operators.AdvancedAdd("RIGHT_TACK", "⊢");
            Operators.AdvancedAdd("LEFT_TACK", "⊣");
            Operators.AdvancedAdd("DOWN_TACK", "⊤");

            //Logical Proofs Symbols
            Operators.AdvancedAdd("labelLogical_Proofs", Language.labelLogical_Proofs);
            Operators.AdvancedAdd("THEREFORE_1", "∴");
            Operators.AdvancedAdd("BECAUSE", "∵");
            Operators.AdvancedAdd("PROPORTIONAL_TO", "∝");
            Operators.AdvancedAdd("END_OF_PROOF", "∎");

            //Common Equivalence and Proportion Operators
            Operators.AdvancedAdd("labelEquivalence_Proportion", Language.labelEquivalence_Proportion);
            Operators.AdvancedAdd("NOT_EQUALS_1", "≠");
            Operators.AdvancedAdd("APPROXIMATELY_EQUAL", "≅");
            Operators.AdvancedAdd("ALMOST_EQUAL", "≈");
            Operators.AdvancedAdd("NOT_ALMOST_EQUAL_TO", "≉");
            Operators.AdvancedAdd("TILDE_SIMILAR_TO", "∼");
            Operators.AdvancedAdd("IDENTICAL_TO", "≡");
            Operators.AdvancedAdd("NOT_IDENTICAL_TO", "≢");
            //Other Equivalence Symbols
            Operators.AdvancedAdd("STRICTLY_EQUIVALENT_TO", "≣");
            //Operators.AdvancedAdd("NOT_IDENTICAL_TO","≢");
            Operators.AdvancedAdd("LESS_THAN_OVER_EQUAL_TO", "≦");
            Operators.AdvancedAdd("GREATER_THAN_OVER_EQUAL_TO", "≧");
            Operators.AdvancedAdd("LESS_THAN_BUT_NOT_EQUAL_TO", "≨");
            Operators.AdvancedAdd("GREATER_THAN_BUT_NOT_EQUAL_TO", "≩");
            Operators.AdvancedAdd("MUCH_LESS_THAN", "≪");
            Operators.AdvancedAdd("MUCH_GREATER_THAN", "≫");
            Operators.AdvancedAdd("BETWEEN", "≬");
            Operators.AdvancedAdd("NOT_EQUIVALENT_TO", "≭");
            Operators.AdvancedAdd("NOT_LESS_THAN", "≮");
            Operators.AdvancedAdd("NOT_GREATER_THAN", "≯");
            Operators.AdvancedAdd("NEITHER_LESS_THAN_NOR_EQUAL_TO", "≰");
            Operators.AdvancedAdd("NEITHER_GREATER_THAN_NOR_EQUAL_TO", "≱");
            Operators.AdvancedAdd("LESS_THAN_OR_EQUIVALENT_TO", "≲");
            Operators.AdvancedAdd("GREATER_THAN_OR_EQUIVALENT_TO", "≳");
            Operators.AdvancedAdd("NEITHER_LESS_THAN_NOR_EQUIVALENT_TO", "≴");
            Operators.AdvancedAdd("NEITHER_GREATER_THAN_NOR_EQUIVALENT_TO", "≵");
            Operators.AdvancedAdd("LESS_THAN_OR_GREATER_THAN", "≶");
            Operators.AdvancedAdd("GREATER_THAN_OR_LESS_THAN", "≷");
            Operators.AdvancedAdd("NEITHER_LESS_THAN_NOR_GREATER_THAN", "≸");
            Operators.AdvancedAdd("NEITHER_GREATER_THAN_NOR_LESS_THAN", "≹");
            Operators.AdvancedAdd("NOT_TILDE", "≁");
            Operators.AdvancedAdd("MINUS_TILDE", "≂");
            Operators.AdvancedAdd("ASYMPTOTICALLY_EQUAL_TO_1", "≃");
            Operators.AdvancedAdd("NOT_ASYMPTOTICALLY_EQUAL_TO_1", "≄");
            Operators.AdvancedAdd("APPROXIMATELY_BUT_NOT_ACTUALLY_EQUAL_TO", "≆");
            Operators.AdvancedAdd("NEITHER_APPROXIMATELY_NOR_ACTUALLY_EQUAL_TO", "≇");
            //Operators.AdvancedAdd("NOT_ALMOST_EQUAL_TO","≉");
            Operators.AdvancedAdd("ALMOST_EQUAL_OR_EQUAL_TO", "≊");
            Operators.AdvancedAdd("TRIPLE_TILDE", "≋");
            Operators.AdvancedAdd("ALL_EQUAL_TO", "≌");

            // Other Mathematical Symbols
            Operators.AdvancedAdd("labelOther_Mathematical", Language.labelOther_Mathematical);
            Operators.AdvancedAdd("MINUS_OR_PLUS_SIGN", "∓");
            Operators.AdvancedAdd("DOT_PLUS", "∔");
            Operators.AdvancedAdd("ASTERISK_OPERATOR", "∗");
            Operators.AdvancedAdd("RING_OPERATOR", "∘");
            Operators.AdvancedAdd("BULLET_OPERATOR", "∙");
            Operators.AdvancedAdd("PROPORTIONAL_TO_1", "∝");
            Operators.AdvancedAdd("RATIO", "∶");
            Operators.AdvancedAdd("PROPORTION", "∷");
            Operators.AdvancedAdd("DOT_MINUS", "∸");
            Operators.AdvancedAdd("EXCESS", "∹");
            Operators.AdvancedAdd("GEOMETRIC_PROPORTION", "∺");
            Operators.AdvancedAdd("HOMOTHETIC", "∻");
            Operators.AdvancedAdd("TILDE_OPERATOR", "∼");
            Operators.AdvancedAdd("REVERSED_TILDE", "∽");
            Operators.AdvancedAdd("INVERTED_LAZY_S", "∾");
            Operators.AdvancedAdd("SINE_WAVE", "∿");
            Operators.AdvancedAdd("WREATH_PRODUCT", "≀");
            Operators.AdvancedAdd("EQUIVALENT_TO", "≍");
            Operators.AdvancedAdd("GEOMETRICALLY_EQUIVALENT_TO", "≎");
            Operators.AdvancedAdd("DIFFERENCE_BETWEEN", "≏");
            Operators.AdvancedAdd("APPROACHES_THE_LIMIT", "≐");
            Operators.AdvancedAdd("GEOMETRICALLY_EQUAL_TO", "≑");
            Operators.AdvancedAdd("APPROXIMATELY_EQUAL_TO_OR_THE_IMAGE_OF", "≒");
            Operators.AdvancedAdd("IMAGE_OF_OR_APPROXIMATELY_EQUAL_TO", "≓");
            Operators.AdvancedAdd("COLON_EQUALS", "≔");
            Operators.AdvancedAdd("EQUALS_COLON", "≕");
            Operators.AdvancedAdd("RING_IN_EQUAL_TO", "≖");
            Operators.AdvancedAdd("RING_EQUAL_TO", "≗");
            Operators.AdvancedAdd("CORRESPONDS_TO", "≘");
            Operators.AdvancedAdd("ESTIMATES", "≙");
            Operators.AdvancedAdd("EQUIANGULAR_TO", "≚");
            Operators.AdvancedAdd("STAR_EQUALS", "≛");
            Operators.AdvancedAdd("DELTA_EQUAL_TO", "≜");
            Operators.AdvancedAdd("EQUAL_TO_BY_DEFINITION", "≝");
            Operators.AdvancedAdd("MEASURED_BY", "≞");
            Operators.AdvancedAdd("QUESTIONED_EQUAL_TO", "≟");
            Operators.AdvancedAdd("PRECEDES", "≺");
            Operators.AdvancedAdd("SUCCEEDS", "≻");
            Operators.AdvancedAdd("PRECEDES_OR_EQUAL_TO", "≼");
            Operators.AdvancedAdd("SUCCEEDS_OR_EQUAL_TO", "≽");
            Operators.AdvancedAdd("PRECEDES_OR_EQUIVALENT_TO", "≾");
            Operators.AdvancedAdd("SUCCEEDS_OR_EQUIVALENT_TO", "≿");
            Operators.AdvancedAdd("DOES_NOT_PRECEDE", "⊀");
            Operators.AdvancedAdd("DOES_NOT_SUCCEED", "⊁");
            Operators.AdvancedAdd("SQUARE_IMAGE_OF", "⊏");
            Operators.AdvancedAdd("SQUARE_ORIGINAL_OF", "⊐");
            Operators.AdvancedAdd("SQUARE_IMAGE_OF_OR_EQUAL_TO", "⊑");
            Operators.AdvancedAdd("SQUARE_ORIGINAL_OF_OR_EQUAL_TO", "⊒");
            Operators.AdvancedAdd("SQUARE_CAP", "⊓");
            Operators.AdvancedAdd("SQUARE_CUP", "⊔");
            Operators.AdvancedAdd("CIRCLED_PLUS_1", "⊕");
            Operators.AdvancedAdd("CIRCLED_MINUS_1", "⊖");
            Operators.AdvancedAdd("CIRCLED_TIMES_1", "⊗");
            Operators.AdvancedAdd("CIRCLED_DIVISION_SLASH_1", "⊘");
            Operators.AdvancedAdd("CIRCLED_DOT_OPERATOR", "⊙");
            Operators.AdvancedAdd("CIRCLED_RING_OPERATOR", "⊚");
            Operators.AdvancedAdd("CIRCLED_ASTERISK_OPERATOR", "⊛");
            Operators.AdvancedAdd("CIRCLED_EQUALS", "⊜");
            Operators.AdvancedAdd("CIRCLED_DASH", "⊝");
            Operators.AdvancedAdd("SQUARED_PLUS", "⊞");
            Operators.AdvancedAdd("SQUARED_MINUS", "⊟");
            Operators.AdvancedAdd("SQUARED_TIMES", "⊠");
            Operators.AdvancedAdd("SQUARED_DOT_OPERATOR", "⊪");
            Operators.AdvancedAdd("ASSERTION", "⊦");
            Operators.AdvancedAdd("MODELS", "⊧");
            Operators.AdvancedAdd("TRUE", "⊨");
            Operators.AdvancedAdd("FORCES", "⊩");
            Operators.AdvancedAdd("TRIPLE_VERTICAL_BAR_RIGHT_TURNSTILE", "⊪");
            Operators.AdvancedAdd("DOUBLE_VERTICAL_BAR_DOUBLE_RIGHT_TURNSTILE", "⊫");
            Operators.AdvancedAdd("DOES_NOT_PROVE", "⊬");
            Operators.AdvancedAdd("NOT_TRUE", "⊭");
            Operators.AdvancedAdd("DOES_NOT_FORCE", "⊮");
            Operators.AdvancedAdd("NEGATED_DOUBLE_VERTICAL_BAR_DOUBLE_RIGHT_TURNSTILE", "⊯");
            Operators.AdvancedAdd("PRECEDES_UNDER_RELATION", "⊰");
            Operators.AdvancedAdd("SUCCEEDS_UNDER_RELATION", "⊱");
            Operators.AdvancedAdd("NORMAL_SUBGROUP_OF", "⊲");
            Operators.AdvancedAdd("CONTAINS_AS_NORMAL_SUBGROUP", "⊳");
            Operators.AdvancedAdd("NORMAL_SUBGROUP_OF_OR_EQUAL_TO", "⊴");
            Operators.AdvancedAdd("CONTAINS_AS_NORMAL_SUBGROUP_OR_EQUAL_TO", "⊵");
            Operators.AdvancedAdd("ORIGINAL_OF", "⊶");
            Operators.AdvancedAdd("IMAGE_OF", "⊷");
            Operators.AdvancedAdd("MULTIMAP", "⊸");
            Operators.AdvancedAdd("HERMITIAN_CONJUGATE_MATRIX", "⊹");
            Operators.AdvancedAdd("INTERCALATE", "⊺");
            Operators.AdvancedAdd("DIAMOND_OPERATOR_1", "⋄");
            Operators.AdvancedAdd("DOT_OPERATOR_1", "⋅");
            Operators.AdvancedAdd("STAR_OPERATOR", "⋆");
            Operators.AdvancedAdd("DIVISION_TIMES", "⋇");
            Operators.AdvancedAdd("BOWTIE", "⋈");
            Operators.AdvancedAdd("LEFT_NORMAL_FACTOR_SEMIDIRECT_PRODUCT", "⋉");
            Operators.AdvancedAdd("RIGHT_NORMAL_FACTOR_SEMIDIRECT_PRODUCT", "⋊");
            Operators.AdvancedAdd("LEFT_SEMIDIRECT_PRODUCT", "⋋");
            Operators.AdvancedAdd("RIGHT_SEMIDIRECT_PRODUCT", "⋌");
            Operators.AdvancedAdd("REVERSED_TILDE_EQUALS", "⋍");
            Operators.AdvancedAdd("PITCHFORK", "⋕");
            Operators.AdvancedAdd("EQUAL_AND_PARALLEL_TO", "⋕");
            Operators.AdvancedAdd("LESS_THAN_WITH_DOT", "⋖");
            Operators.AdvancedAdd("GREATER_THAN_WITH_DOT", "⋗");
            Operators.AdvancedAdd("VERY_MUCH_LESS_THAN", "⋘");
            Operators.AdvancedAdd("VERY_MUCH_GREATER_THAN", "⋙");
            Operators.AdvancedAdd("LESS_THAN_EQUAL_TO_OR_GREATER_THAN", "⋚");
            Operators.AdvancedAdd("GREATER_THAN_EQUAL_TO_OR_LESS_THAN", "⋛");
            Operators.AdvancedAdd("EQUAL_TO_OR_LESS_THAN", "⋜");
            Operators.AdvancedAdd("EQUAL_TO_OR_GREATER_THAN", "⋝");
            Operators.AdvancedAdd("EQUAL_TO_OR_PRECEDES", "⋞");
            Operators.AdvancedAdd("EQUAL_TO_OR_SUCCEEDS", "⋟");
            Operators.AdvancedAdd("DOES_NOT_PRECEDE_OR_EQUAL", "⋠");
            Operators.AdvancedAdd("DOES_NOT_SUCCEED_OR_EQUAL", "⋡");
            Operators.AdvancedAdd("NOT_SQUARE_IMAGE_OF_OR_EQUAL_TO", "⋢");
            Operators.AdvancedAdd("NOT_SQUARE_ORIGINAL_OF_OR_EQUAL_TO", "⋣");
            Operators.AdvancedAdd("SQUARE_IMAGE_OF_OR_NOT_EQUAL_TO", "⋤");
            Operators.AdvancedAdd("SQUARE_ORIGINAL_OF_OR_NOT_EQUAL_TO", "⋥");
            Operators.AdvancedAdd("LESS_THAN_BUT_NOT_EQUIVALENT_TO", "⋦");
            Operators.AdvancedAdd("GREATER_THAN_BUT_NOT_EQUIVALENT_TO", "⋧");
            Operators.AdvancedAdd("PRECEDES_BUT_NOT_EQUIVALENT_TO", "⋨");
            Operators.AdvancedAdd("SUCCEEDS_BUT_NOT_EQUIVALENT_TO", "⋩");
            Operators.AdvancedAdd("NOT_NORMAL_SUBGROUP_OF", "⋪");
            Operators.AdvancedAdd("DOES_NOT_CONTAIN_AS_NORMAL_SUBGROUP", "⋫");
            Operators.AdvancedAdd("NOT_NORMAL_SUBGROUP_OF_OR_EQUAL_TO", "⋬");
            Operators.AdvancedAdd("DOES_NOT_CONTAIN_AS_NORMAL_SUBGROUP_OR_EQUAL", "⋭");
            Operators.AdvancedAdd("VERTICAL_ELLIPSIS", "⋮");
            Operators.AdvancedAdd("MIDLINE_HORIZONTAL_ELLIPSIS", "⋯");
            Operators.AdvancedAdd("UP_RIGHT_DIAGONAL_ELLIPSIS", "⋰");
            Operators.AdvancedAdd("DOWN_RIGHT_DIAGONAL_ELLIPSIS", "⋱");
        }
    }
}